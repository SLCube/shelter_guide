buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.13-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
	id "jacoco"
}

group = 'com.slcube'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-quartz'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-batch'
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	implementation "com.querydsl:querydsl-apt:${queryDslVersion}"
	implementation "com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.3"

	implementation 'org.springdoc:springdoc-openapi-ui:1.6.6'

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	implementation 'com.h2database:h2'
	runtimeOnly 'com.h2database:h2'
//	runtimeOnly 'com.mysql:mysql-connector-j'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.batch:spring-batch-test'
	testImplementation 'org.awaitility:awaitility:4.2.0'
	testRuntimeOnly 'com.h2database:h2'
}

tasks.named('test') {
	finalizedBy jacocoTestReport
	useJUnitPlatform()
	systemProperty "jasypt.encryptor.password", System.getProperties().get("jasypt.encryptor.password")
}

jacoco {
	toolVersion= "0.8.8"

	reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
	reports {
		html.enabled true
		xml.enabled false
		csv.enabled false
	}

	def Qdomains = []
	for(qPattern in "**/QA" .. "**/QZ") {
		Qdomains.add(qPattern + "*")
	}

	afterEvaluate {

		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: ["com/slcube/**/*Dto.*",
							  "com/slcube/shelter_guide/ShelterGuideApplication.class"] + Qdomains)
		}))
	}

	dependsOn test
	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {

	def Qdomains = []
	// 패키지 + 클래스명
	for (qPattern in '*.QA'..'*.QZ') { // qPattern = '*.QA', '*.QB', ... '*.QZ'
		Qdomains.add(qPattern + '*')
	}

	violationRules {
		rule {
			enabled = true
			element = 'CLASS'

			limit {
				counter = 'CLASS'
				value = 'COVEREDRATIO'
				minimum = 0.75
			}

			excludes = [] + Qdomains
		}
	}
}

def querydslDir = "$buildDir/generated/querydsl"

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}

sourceSets {
	main.java.srcDir querydslDir
}

compileQuerydsl{
	options.annotationProcessorPath = configurations.querydsl
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}